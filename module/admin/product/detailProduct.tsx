import { Button, Col, Form, Input, InputNumber, message, Modal, Row, Upload } from 'antd'
import Head from 'next/head'
import React, { useEffect, useState } from 'react'
import PageTitle from '../../../components/PageTitle'
import type { UploadFile } from 'antd/es/upload/interface';
import type { RcFile, UploadProps } from 'antd/es/upload';
import { PlusOutlined } from '@ant-design/icons';
import classNames from 'classnames/bind'
import style from "../Admin.module.scss"
import { useMutation, useQuery } from 'react-query';
import { addNewProduct, getProductID, updateProduct } from '../../../api/ApiProduct';
import { useRouter } from 'next/router';
import { UploadFileStatus } from 'antd/lib/upload/interface';

const getBase64 = (file: RcFile): Promise<string> =>
  new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = (error) => reject(error);
});


const { TextArea } = Input;

const cx = classNames.bind(style)

export default function ProductDetailAdmin() {
    const router = useRouter();
    const { id } = router.query;
    const [previewOpen, setPreviewOpen] = useState(false);
    const [previewImage, setPreviewImage] = useState('');
    const [previewTitle, setPreviewTitle] = useState('');
    const [selectedImage, setSelectedImage] = useState(null);
    const [form] = Form.useForm();
    const { isLoading, isError, isFetching, data, error } = useQuery(['product', id], () => getProductID(`${id}`),
        {
            enabled: id != undefined
        }
    );
    const addProductMutation = useMutation(
        async (payload: any) => await addNewProduct(payload),
        {
          onSettled: async (data: any) => {
            message.success('add new product successfully!')
            setTimeout(()=> {
                router.back();
            }, 3000)
          }
        }
    )

    const updateMutation = useMutation(
        async (payload: any) => await updateProduct(payload),
        {
          onSettled: async (data: any) => {
            message.success('update product successfully!')
            setTimeout(()=> {
                router.back();
            }, 3000)
          }
        }
    )
    
    const handleCancel = () => setPreviewOpen(false);
  
    const handlePreview = async (file: UploadFile) => {
      if (!file.url && !file.preview) {
        file.preview = await getBase64(file.originFileObj as RcFile);
      }
  
      setPreviewImage(file.url || (file.preview as string));
      setPreviewOpen(true);
      setPreviewTitle(file.name || file.url!.substring(file.url!.lastIndexOf('/') + 1));
    };
    const [fileList, setFileList] = useState<UploadFile[]>([]);
    const onFinish = (value:any) => {
        if(id) {
            updateMutation.mutate({...value, image: fileList, idproduct: id})
        }
        else addProductMutation.mutate({...value, image: fileList})
    }
    
    const handleChange: UploadProps['onChange'] = ({ fileList: newFileList }) =>
      setFileList(newFileList);
  
    const uploadButton = (
      <div>
        <PlusOutlined />
        <div style={{ marginTop: 8 }}>Upload</div>
      </div>
    );
    const handleImageChange = (e) => {
        setSelectedImage(e.target.files[0]);
      };
   
    useEffect(()=> {
        if(data) {
            const severImages = data?.data[0].image.split(";")
            const imageList = severImages.map((item, index) => 
            {
                const string = item;
                const lastIndex = string.lastIndexOf('/')
                const imageName = string.slice(lastIndex+1, item.length)
                return (
                    {
                        uid: '-'+ index, // No need to increment here
                        name: imageName,
                        status: 'done' as UploadFileStatus, // Make sure to cast the status to UploadFileStatus
                        url: item
                    }
                )
            }
            )
            setFileList(imageList)
            form.setFieldsValue(data.data[0])
        }
    }, [data])
    console.log(selectedImage)
  return (
    <div>
        <Head >
            <title>Fooce | Product </title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/icon.png" />
        </Head>
        <PageTitle name = {id ? "Product Update" : "Add new product"} />
        <div className={cx('admin')}>
            <Row gutter={16} justify="center">
                <Col span={6} style={{textAlign: 'center'}} className='gutter-row'>
                    <Upload
                    listType="picture-card"
                    fileList={fileList}
                    onPreview={handlePreview}
                    onChange={handleChange}
                    >
                        {fileList.length >= 4 ? null : uploadButton}
                    </Upload>
                    <Modal open={previewOpen} title={previewTitle} footer={null} onCancel={handleCancel}>
                        <img alt="example" style={{ width: '100%' }} src={previewImage} />
                    </Modal>
                </Col>
                <Col span={12} className='gutter-row'>
                    <Form
                    form={form}
                    name="basic"
                    layout= "vertical"
                    labelCol={{ span: 8 }}
                    wrapperCol={{ span: 16 }}
                    onFinish={onFinish}
                    autoComplete="off"
                    className={cx("form")}
                >
                        <Form.Item
                        label="Product Name"
                        name="name"
                        rules={[{ required: true, message: 'Please input product name!' }]}
                        className={cx("form-label")}
                        wrapperCol={{ span: 24 }}
                        >
                        <Input className={cx("form-input")}/>
                        </Form.Item>
                        <br />
                        <Form.Item
                            label="Price"
                            name="price"
                            rules={[{ required: true, message: 'Please input product price!' }]}
                            className={cx("form-label")}
                            wrapperCol={{ span: 24 }}
                        >
                        <InputNumber className={cx("form-input")} style={{minWidth: '200px'}}/>
                        </Form.Item>
                        <br />
                        <Form.Item
                            label="Description"
                            name="description"
                            rules={[{ required: true, message: 'Please input short description!' }]}
                            className={cx("form-label")}
                            wrapperCol={{ span: 24 }}
                        >
                        <TextArea style={{height: '100px', padding: '10px'}} />
                        </Form.Item>
                        <br />
                        <Form.Item
                            label="Category"
                            name="category"
                            rules={[{ required: true, message: 'Please input product category!' }]}
                            className={cx("form-label")}
                            wrapperCol={{ span: 24 }}
                        >
                        
                        <Input className={cx("form-input")}/>
                        </Form.Item>
                        <br />
                        <Form.Item
                            label="Long Description"
                            name="long_description"
                            
                            wrapperCol={{ span: 24 }}
                            className={cx("form-label")}
                            >
                            <TextArea style={{height: '100px', padding: '10px'}} />
                        </Form.Item>
                        <br />
                        <Form.Item
                            label="Weight"
                            name="weight"
                            rules={[{ required: true, message: 'Please input product weight!' }]}
                            wrapperCol={{ span: 24 }}
                            className={cx("form-label")}
                            >
                            <Input className={cx("form-input")}/>
                        </Form.Item>
                        <br />
                        <Form.Item
                            label="Size"
                            name="size"
                            rules={[{ required: true, message: 'Please input product dimensions!' }]}
                            wrapperCol={{ span: 24 }}
                            className={cx("form-label")}
                            >
                            <Input className={cx("form-input")}/>
                        </Form.Item>
                        <br />
                        <Form.Item
                            label="Tags (Food/Juice) "
                            name="tag"
                            rules={[{ required: true, message: 'Please input product tag!' }]}
                            wrapperCol={{ span: 24 }}
                            className={cx("form-label")}
                            >
                            <Input className={cx("form-input")}/>
                        </Form.Item>
                        <br />
                       
                        <Form.Item wrapperCol={{ span: 24 }}>
                            <Button className='btn' htmlType="submit">{id ? 'update' : 'add'}</Button>
                        </Form.Item>
                    </Form>
                </Col>
            </Row>
                
            </div>
    </div>
  )
}
