import { Button,  Image,  Modal,  Pagination,  Table } from 'antd';
import { ColumnsType, TableProps } from 'antd/es/table';
import Head from 'next/head'
import React, { useEffect, useState } from 'react'
import PageTitle from '../../../components/PageTitle'
import classNames from 'classnames/bind'
import style from "../Admin.module.scss"
import { useMutation, useQuery } from 'react-query';
import { getAllProduct } from '../../../api/ApiProduct';
import ModalConfirm from '../../../components/Modal';
import Link from 'next/link';


interface DataType_Product {
    id: string;
    name: string;
    price: number;
    tag: string;
    category: string;
}

const _ = require('lodash');
const cx = classNames.bind(style)
export default function ProductManager() {
  const [currentPage, setCurrentPage] = useState(1);
  const [dataTable, setDataTable] = useState([])
  const [categoryList, setCategoryList] = useState([])
  const [idProduct, setIdProduct] = useState('')
  const {  data, refetch} = useQuery(['getAllProduct', currentPage], () => getAllProduct(currentPage.toString()));
  
 
  const handlePageChange = (page) => {
    setCurrentPage(page);
  };  

  const handleDelete = (id) => {
    setIdProduct(id)
  }
 

 
  const columns_product: ColumnsType<DataType_Product> = [
    {
      title: ' ',
      dataIndex: 'key',
      render: (_, __, index) =>
          (currentPage - 1) * 9 + index + 1,
      
    },
    {
      title: 'Name',
      dataIndex: 'name',
      onFilter: (value: string, record) => record.name.indexOf(value) === 0,
      sorter: (a, b) => a.name.length - b.name.length,
      sortDirections: ['descend'],
    },
    // {
    //   title: 'Image',
    //   dataIndex: 'image',
    //   render: (_, record) => {
    //     return (
    //         <div className={cx("img-wrap")}>
    //             <Image 
    //             src={record.image[0]}
    //             fallback={require("../../assets/imgs/logo.png")}
                
    //             />
    //         </div>
    //     )
    // }
    // },
    {
      title: 'Price',
      dataIndex: 'price',
      defaultSortOrder: 'descend',
      sorter: (a, b) => a.price - b.price,
    },
    {
      title: 'Tags',
      dataIndex: 'tag',
      filters: [
        {
          text: 'Food',
          value: 'Food',
        },
        {
          text: 'Juice',
          value: 'Juice',
        },
      ],
      onFilter: (value: string, record) => record.tag.indexOf(value) === 0,
    },
    {
        title: 'Category',
        dataIndex: 'category',
        filters: categoryList.map((item) =>
        (
          {
            text: item,
            value:item
          }
        )
        ),
        onFilter: (value: string, record) => record.category.indexOf(value) === 0,
      },
    {
        title: 'Action',
        dataIndex: 'action',
        
        render: (_, record) => {
            return (
                <div >
                    <Button >
                      <Link href={`/product/${record.id}`}>
                            view
                      </Link>
                    </Button>
                    
                    <Button style={{margin: '0 10px'}} onClick={()=> handleDelete(record.id)}>delete</Button>
           
                    <Button >
                      <Link href={`/admin/product/${record.id}`}>
                          update
                      </Link>
                    </Button>
                </div>
                
            )
        }
    }
  ];
  useEffect(()=> {
      if(data) {
        const filteredData = data.data.map(item => ({
          id: item.id,
          name: item.name,
          price: parseInt(item.price,10),
          tag: item.tag,
          category: item.category
        }));
        const uniqueCategories = _.uniqBy(data.data.map(item => item.category));
        setDataTable(filteredData)
        setCategoryList(uniqueCategories)
      }
    }, [data])
  return (
    <div>
        <Head >
            <title>Fooce | Product Manager</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/icon.png" />
        </Head>
        <PageTitle name = "Product Manager" />
        <div className={cx('admin')}>
        <Table columns={columns_product} dataSource={dataTable} pagination={false}/>
        <div style={{textAlign: 'center', padding: '20px 0'}}>
          <Pagination
          current={currentPage}
          total={parseInt(data?.total_products,10)}
          pageSize={9}
          onChange={handlePageChange}
          className={cx("pagination")}
          />
        </div>
        <ModalConfirm actionModal={'delete'} idproduct={idProduct} onDeleteProduct={refetch}/>
        </div>
    </div>
  )
}
